<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Built-In Commands - coroutine manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclCmd</a>
<small>&gt;</small> coroutine</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<h3><a name="M2">NAME</a></h3>

coroutine, yield, yieldto - Create and produce values from
coroutines 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>coroutine</b> <i>name command</i> ?<i>arg...</i>?<br>
<b>yield</b> ?<i>value</i>?<br>
<b>yieldto</b> <i>command</i> ?<i>arg...</i>?<br>
<i>name</i> ?<i>value...</i>?<br>
<h3><a name="M4">DESCRIPTION</a></h3>

The <b>coroutine</b> command creates a new coroutine context (with
associated command) named <i>name</i> and executes that context by
calling <i>command</i>, passing in the other remaining arguments
without further interpretation. Once <i>command</i> returns
normally or with an exception (e.g., an error) the coroutine
context <i>name</i> is deleted. 

<p>Within the context, values may be generated as results by using
the <b>yield</b> command; if no <i>value</i> is supplied, the empty
string is used. When that is called, the context will suspend
execution and the <b>coroutine</b> command will return the argument
to <b>yield</b>. The execution of the context can then be resumed
by calling the context command, optionally passing in the
<i>single</i> value to use as the result of the <b>yield</b> call
that caused the context to be suspended. If the coroutine context
never yields and instead returns conventionally, the result of the
<b>coroutine</b> command will be the result of the evaluation of
the context.</p>

<p>The coroutine may also suspend its execution by use of the
<b>yieldto</b> command, which instead of returning, cedes execution
to some command called <i>command</i> (resolved in the context of
the coroutine) and to which <i>any number</i> of arguments may be
passed. Since every coroutine has a context command, <b>yieldto</b>
can be used to transfer control directly from one coroutine to
another (this is only advisable if the two coroutines are expecting
this to happen) but <i>any</i> command may be the target. If a
coroutine is suspended by this mechanism, the coroutine processing
can be resumed by calling the context command optionally passing in
an arbitrary number of arguments. The return value of the
<b>yieldto</b> call will be the list of arguments passed to the
context command; it is up to the caller to decide what to do with
those values.</p>

<p>The recommended way of writing a version of <b>yield</b> that
allows resumption with multiple arguments is by using
<b>yieldto</b> and the <b><a href=
"../TclCmd/return.htm">return</a></b> command, like this:</p>

<pre>
proc yieldm {value} {
    <b>yieldto</b> return -level 0 $value
}
</pre>

<p>The coroutine can also be deleted by destroying the command
<i>name</i>, and the name of the current coroutine can be retrieved
by using <b><a href="../TclCmd/info.htm">info coroutine</a></b>. If
there are deletion traces on variables in the coroutine's
implementation, they will fire at the point when the coroutine is
explicitly deleted (or, naturally, if the command returns
conventionally).</p>

<p>At the point when <i>command</i> is called, the current
namespace will be the global namespace and there will be no stack
frames above it (in the sense of <b><a href=
"../TclCmd/upvar.htm">upvar</a></b> and <b><a href=
"../TclCmd/uplevel.htm">uplevel</a></b>). However, which command to
call will be determined in the namespace that the <b>coroutine</b>
command was called from.</p>

<h3><a name="M5">EXAMPLES</a></h3>

This example shows a coroutine that will produce an infinite
sequence of even values, and a loop that consumes the first ten of
them. 

<pre>
proc allNumbers {} {
    <b>yield</b>
    set i 0
    while 1 {
        <b>yield</b> $i
        incr i 2
    }
}
<b>coroutine</b> nextNumber allNumbers
for {set i 0} {$i &lt; 10} {incr i} {
    puts "received [<i>nextNumber</i>]"
}
rename nextNumber {}
</pre>

<p>In this example, the coroutine acts to add up the arguments
passed to it.</p>

<pre>
<b>coroutine</b> accumulator apply {{} {
    set x 0
    while 1 {
        incr x [<b>yield</b> $x]
    }
}}
for {set i 0} {$i &lt; 10} {incr i} {
    puts "$i -&gt; [<i>accumulator</i> $i]"
}
</pre>

<p>This example demonstrates the use of coroutines to implement the
classic Sieve of Eratosthenes algorithm for finding prime numbers.
Note the creation of coroutines inside a coroutine.</p>

<pre>
proc filterByFactor {source n} {
    <b>yield</b> [info coroutine]
    while 1 {
        set x [<i>$source</i>]
        if {$x % $n} {
            <b>yield</b> $x
        }
    }
}
<b>coroutine</b> allNumbers apply {{} {while 1 {<b>yield</b> [incr x]}}}
<b>coroutine</b> eratosthenes apply {c {
    <b>yield</b>
    while 1 {
        set n [<i>$c</i>]
        <b>yield</b> $n
        set c [<b>coroutine</b> prime$n filterByFactor $c $n]
    }
}} allNumbers
for {set i 1} {$i &lt;= 20} {incr i} {
    puts "prime#$i = [<i>eratosthenes</i>]"
}
</pre>

<p>This example shows how a value can be passed around a group of
three coroutines that yield to each other:</p>

<pre>
proc juggler {name target {value ""}} {
    if {$value eq ""} {
        set value [<b>yield</b> [info coroutine]]
    }
    while {$value ne ""} {
        puts "$name : $value"
        set value [string range $value 0 end-1]
        lassign [<b>yieldto</b> $target $value] value
    }
}
<b>coroutine</b> j1 juggler Larry [
    <b>coroutine</b> j2 juggler Curly [
        <b>coroutine</b> j3 juggler Moe j1]] "Nyuck!Nyuck!Nyuck!"
</pre>

<h4><a name="M6">DETAILED SEMANTICS</a></h4>

This example demonstrates that coroutines start from the global
namespace, and that <i>command</i> resolution happens before the
coroutine stack is created. 

<pre>
proc report {where level} {
    # Where was the caller called from?
    set ns [uplevel 2 {namespace current}]
    <b>yield</b> "made $where $level context=$ns name=[info coroutine]"
}
proc example {} {
    report outer [info level]
}
namespace eval demo {
    proc example {} {
        report inner [info level]
    }
    proc makeExample {} {
        puts "making from [info level]"
        puts [<b>coroutine</b> coroEg example]
    }
    makeExample
}
</pre>

<p>Which produces the output below. In particular, we can see that
stack manipulation has occurred (comparing the levels from the
first and second line) and that the parent level in the coroutine
is the global namespace. We can also see that coroutine names are
local to the current namespace if not qualified, and that
coroutines may yield at depth (e.g., in called procedures).</p>

<pre>
making from 2
made inner 1 context=:: name=::demo::coroEg
</pre>

<h3><a name="M7">SEE ALSO</a></h3>

<b><a href="../TclCmd/apply.htm">apply</a></b>, <b><a href=
"../TclCmd/info.htm">info</a></b>, <b><a href=
"../TclCmd/proc.htm">proc</a></b>, <b><a href=
"../TclCmd/return.htm">return</a></b> 

<h3><a name="M8">KEYWORDS</a></h3>

<a href="../Keywords/C.htm#coroutine">coroutine</a>, <a href=
"../Keywords/G.htm#generator">generator</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 2009 Donal K. Fellows.</div>
</body>
</html>

