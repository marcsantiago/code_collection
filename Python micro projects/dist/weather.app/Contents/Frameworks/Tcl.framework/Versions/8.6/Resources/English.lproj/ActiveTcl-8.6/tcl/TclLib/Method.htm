<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>TclOO Library Functions - Tcl_Method manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclLib</a>
<small>&gt;</small> Method</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="Method.htm#M2" name="L481">NAME</a> 

<dl>
<dd>Tcl_ClassSetConstructor, Tcl_ClassSetDestructor,
Tcl_MethodDeclarerClass, Tcl_MethodDeclarerObject,
Tcl_MethodIsPublic, Tcl_MethodIsType, Tcl_MethodName,
Tcl_NewInstanceMethod, Tcl_NewMethod, Tcl_ObjectContextInvokeNext,
Tcl_ObjectContextIsFiltering, Tcl_ObjectContextMethod,
Tcl_ObjectContextObject, Tcl_ObjectContextSkippedArgs - manipulate
methods and method-call contexts</dd>
</dl>
</dd>

<dd><a href="Method.htm#M3" name="L482">SYNOPSIS</a></dd>

<dd><a href="Method.htm#M4" name="L483">ARGUMENTS</a></dd>

<dd><a href="Method.htm#M5" name="L484">DESCRIPTION</a></dd>

<dd><a href="Method.htm#M6" name="L485">METHOD CREATION</a></dd>

<dd><a href="Method.htm#M7" name="L486">METHOD CALL
CONTEXTS</a></dd>

<dd><a href="Method.htm#M8" name="L487">METHOD TYPES</a></dd>

<dd><a href="Method.htm#M9" name="L488">TCL_METHODCALLPROC FUNCTION
SIGNATURE</a></dd>

<dd><a href="Method.htm#M10" name="L489">TCL_METHODDELETEPROC
FUNCTION SIGNATURE</a></dd>

<dd><a href="Method.htm#M11" name="L490">TCL_CLONEPROC FUNCTION
SIGNATURE</a></dd>

<dd><a href="Method.htm#M12" name="L491">SEE ALSO</a></dd>

<dd><a href="Method.htm#M13" name="L492">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

Tcl_ClassSetConstructor, Tcl_ClassSetDestructor,
Tcl_MethodDeclarerClass, Tcl_MethodDeclarerObject,
Tcl_MethodIsPublic, Tcl_MethodIsType, Tcl_MethodName,
Tcl_NewInstanceMethod, Tcl_NewMethod, Tcl_ObjectContextInvokeNext,
Tcl_ObjectContextIsFiltering, Tcl_ObjectContextMethod,
Tcl_ObjectContextObject, Tcl_ObjectContextSkippedArgs - manipulate
methods and method-call contexts 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tclOO.h&gt;</b><br>
Tcl_Method<br>
<b>Tcl_NewMethod</b>(<i>interp, class, nameObj, isPublic,<br>
 methodTypePtr, clientData</i>)<br>
Tcl_Method<br>
<b>Tcl_NewInstanceMethod</b>(<i>interp, object, nameObj,
isPublic,<br>
 methodTypePtr, clientData</i>)<br>
<b>Tcl_ClassSetConstructor</b>(<i>interp, class, method</i>)<br>
<b>Tcl_ClassSetDestructor</b>(<i>interp, class, method</i>)<br>
Tcl_Class<br>
<b>Tcl_MethodDeclarerClass</b>(<i>method</i>)<br>
Tcl_Object<br>
<b>Tcl_MethodDeclarerObject</b>(<i>method</i>)<br>
Tcl_Obj *<br>
<b>Tcl_MethodName</b>(<i>method</i>)<br>
int<br>
<b>Tcl_MethodIsPublic</b>(<i>method</i>)<br>
int<br>
<b>Tcl_MethodIsType</b>(<i>method, methodTypePtr,
clientDataPtr</i>)<br>
int<br>
<b>Tcl_ObjectContextInvokeNext</b>(<i>interp, context, objc, objv,
skip</i>)<br>
int<br>
<b>Tcl_ObjectContextIsFiltering</b>(<i>context</i>)<br>
Tcl_Method<br>
<b>Tcl_ObjectContextMethod</b>(<i>context</i>)<br>
Tcl_Object<br>
<b>Tcl_ObjectContextObject</b>(<i>context</i>)<br>
int<br>
<b>Tcl_ObjectContextSkippedArgs</b>(<i>context</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in/out)</dt>

<dd>The interpreter holding the object or class to create or update
a method in.</dd>

<dt>Tcl_Object <b>object</b> (in)</dt>

<dd>The object to create the method in.</dd>

<dt>Tcl_Class <b>class</b> (in)</dt>

<dd>The class to create the method in.</dd>

<dt>Tcl_Obj <b>*nameObj</b> (in)</dt>

<dd>The name of the method to create. Should not be NULL unless
creating constructors or destructors.</dd>

<dt>int <b>isPublic</b> (in)</dt>

<dd>A boolean flag saying whether the method is to be
exported.</dd>

<dt>Tcl_MethodType <b>*methodTypePtr</b> (in)</dt>

<dd>A description of the type of the method to create, or the type
of method to compare against.</dd>

<dt>ClientData <b>clientData</b> (in)</dt>

<dd>A piece of data that is passed to the implementation of the
method without interpretation.</dd>

<dt>ClientData <b>*clientDataPtr</b> (out)</dt>

<dd>A pointer to a variable in which to write the <i>clientData</i>
value supplied when the method was created. If NULL, the
<i>clientData</i> value will not be retrieved.</dd>

<dt>Tcl_Method <b>method</b> (in)</dt>

<dd>A reference to a method to query.</dd>

<dt>Tcl_ObjectContext <b>context</b> (in)</dt>

<dd>A reference to a method-call context. Note that client code
<i>must not</i> retain a reference to a context.</dd>

<dt>int <b>objc</b> (in)</dt>

<dd>The number of arguments to pass to the method
implementation.</dd>

<dt>Tcl_Obj *const <b>*objv</b> (in)</dt>

<dd>An array of arguments to pass to the method
implementation.</dd>

<dt>int <b>skip</b> (in)</dt>

<dd>The number of arguments passed to the method implementation
that do not represent "real" arguments.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

A method is an operation carried out on an object that is
associated with the object. Every method must be attached to either
an object or a class; methods attached to a class are associated
with all instances (direct and indirect) of that class. 

<p>Given a method, the entity that declared it can be found using
<b>Tcl_MethodDeclarerClass</b> which returns the class that the
method is attached to (or NULL if the method is not attached to any
class) and <b>Tcl_MethodDeclarerObject</b> which returns the object
that the method is attached to (or NULL if the method is not
attached to an object). The name of the method can be retrieved
with <b>Tcl_MethodName</b> and whether the method is exported is
retrieved with <b>Tcl_MethodIsPublic</b>. The type of the method
can also be introspected upon to a limited degree; the function
<b>Tcl_MethodIsType</b> returns whether a method is of a particular
type, assigning the per-method <i>clientData</i> to the variable
pointed to by <i>clientDataPtr</i> if (that is non-NULL) if the
type is matched.</p>

<h4><a name="M6">METHOD CREATION</a></h4>

Methods are created by <b>Tcl_NewMethod</b> and
<b>Tcl_NewInstanceMethod</b>, which create a method attached to a
class or an object respectively. In both cases, the <i>nameObj</i>
argument gives the name of the method to create, the
<i>isPublic</i> argument states whether the method should be
exported initially, the <i>methodTypePtr</i> argument describes the
implementation of the method (see the <b>METHOD TYPES</b> section
below) and the <i>clientData</i> argument gives some
implementation-specific data that is passed on to the
implementation of the method when it is called. 

<p>When the <i>nameObj</i> argument to <b>Tcl_NewMethod</b> is
NULL, an unnamed method is created, which is used for constructors
and destructors. Constructors should be installed into their class
using the <b>Tcl_ClassSetConstructor</b> function, and destructors
(which must not require any arguments) should be installed into
their class using the <b>Tcl_ClassSetDestructor</b> function.
Unnamed methods should not be used for any other purpose, and named
methods should not be used as either constructors or destructors.
Also note that a NULL <i>methodTypePtr</i> is used to provide
internal signaling, and should not be used in client code.</p>

<h4><a name="M7">METHOD CALL CONTEXTS</a></h4>

When a method is called, a method-call context reference is passed
in as one of the arguments to the implementation function. This
context can be inspected to provide information about the caller,
but should not be retained beyond the moment when the method call
terminates. 

<p>The method that is being called can be retrieved from the
context by using <b>Tcl_ObjectContextMethod</b>, and the object
that caused the method to be invoked can be retrieved with
<b>Tcl_ObjectContextObject</b>. The number of arguments that are to
be skipped (e.g. the object name and method name in a normal method
call) is read with <b>Tcl_ObjectContextSkippedArgs</b>, and the
context can also report whether it is working as a filter for
another method through <b>Tcl_ObjectContextIsFiltering</b>.</p>

<p>During the execution of a method, the method implementation may
choose to invoke the stages of the method call chain that come
after the current method implementation. This (the core of the
<b><a href="../TclCmd/next.htm">next</a></b> command) is done using
<b>Tcl_ObjectContextInvokeNext</b>. Note that this function does
not manipulate the call-frame stack, unlike the <b><a href=
"../TclCmd/next.htm">next</a></b> command; if the method
implementation has pushed one or more extra frames on the stack as
part of its implementation, it is also responsible for temporarily
popping those frames from the stack while the
<b>Tcl_ObjectContextInvokeNext</b> function is executing. Note also
that the method-call context is <i>never</i> deleted during the
execution of this function.</p>

<h3><a name="M8">METHOD TYPES</a></h3>

The types of methods are described by a pointer to a Tcl_MethodType
structure, which is defined as: 

<pre>
typedef struct {
    int <i>version</i>;
    const char *<i>name</i>;
    Tcl_MethodCallProc *<i>callProc</i>;
    Tcl_MethodDeleteProc *<i>deleteProc</i>;
    Tcl_CloneProc *<i>cloneProc</i>;
} <b>Tcl_MethodType</b>;
</pre>

<p>The <i>version</i> field allows for future expansion of the
structure, and should always be declared equal to
TCL_OO_METHOD_VERSION_CURRENT. The <i>name</i> field provides a
human-readable name for the type, and is the value that is exposed
via the <b>info class methodtype</b> and <b>info object
methodtype</b> Tcl commands.</p>

<p>The <i>callProc</i> field gives a function that is called when
the method is invoked; it must never be NULL.</p>

<p>The <i>deleteProc</i> field gives a function that is used to
delete a particular method, and is called when the method is
replaced or removed; if the field is NULL, it is assumed that the
method's <i>clientData</i> needs no special action to delete.</p>

<p>The <i>cloneProc</i> field is either a function that is used to
copy a method's <i>clientData</i> (as part of <b><a href=
"../TclLib/Class.htm">Tcl_CopyObjectInstance</a></b>) or NULL to
indicate that the <i>clientData</i> can just be copied
directly.</p>

<h4><a name="M9">TCL_METHODCALLPROC FUNCTION SIGNATURE</a></h4>

Functions matching this signature are called when the method is
invoked. 

<pre>
typedef int <b>Tcl_MethodCallProc</b>(
        ClientData <i>clientData</i>,
        <a href=
"../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
        Tcl_ObjectContext <i>objectContext</i>,
        int <i>objc</i>,
        Tcl_Obj *const *<i>objv</i>);
</pre>

<p>The <i>clientData</i> argument to a Tcl_MethodCallProc is the
value that was given when the method was created, the <i>interp</i>
is a place in which to execute scripts and access variables as well
as being where to put the result of the method, and the <i>objc</i>
and <i>objv</i> fields give the parameter objects to the method.
The calling context of the method can be discovered through the
<i>objectContext</i> argument, and the return value from a
Tcl_MethodCallProc is any Tcl return code (e.g. TCL_OK,
TCL_ERROR).</p>

<h4><a name="M10">TCL_METHODDELETEPROC FUNCTION SIGNATURE</a></h4>

Functions matching this signature are used when a method is
deleted, whether through a new method being created or because the
object or class is deleted. 

<pre>
typedef void <b>Tcl_MethodDeleteProc</b>(
        ClientData <i>clientData</i>);
</pre>

<p>The <i>clientData</i> argument to a Tcl_MethodDeleteProc will be
the same as the value passed to the <i>clientData</i> argument to
<b>Tcl_NewMethod</b> or <b>Tcl_NewInstanceMethod</b> when the
method was created.</p>

<h4><a name="M11">TCL_CLONEPROC FUNCTION SIGNATURE</a></h4>

Functions matching this signature are used to copy a method when
the object or class is copied using <b><a href=
"../TclLib/Class.htm">Tcl_CopyObjectInstance</a></b> (or <b><a
href="../TclCmd/copy.htm">oo::copy</a></b>). 

<pre>
typedef int <b>Tcl_CloneProc</b>(
        <a href=
"../TclLib/Interp.htm">Tcl_Interp</a> *<i>interp</i>,
        ClientData <i>oldClientData</i>,
        ClientData *<i>newClientDataPtr</i>);
</pre>

<p>The <i>interp</i> argument gives a place to write an error
message when the attempt to clone the object is to fail, in which
case the clone procedure must also return TCL_ERROR; it should
return TCL_OK otherwise. The <i>oldClientData</i> field to a
Tcl_CloneProc gives the value from the method being copied from,
and the <i>newClientDataPtr</i> field will point to a variable in
which to write the value for the method being copied to.</p>

<h3><a name="M12">SEE ALSO</a></h3>

<b>Class</b>, <b><a href="../TclCmd/class.htm">oo::class</a></b>,
<b><a href="../TclCmd/define.htm">oo::define</a></b>, <b><a href=
"../TclCmd/object.htm">oo::object</a></b> 

<h3><a name="M13">KEYWORDS</a></h3>

<a href="../Keywords/C.htm#constructor">constructor</a>, <a href=
"../Keywords/M.htm#method">method</a>, <a href=
"../Keywords/O.htm#object">object</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 2007 Donal K. Fellows</div>
</body>
</html>

