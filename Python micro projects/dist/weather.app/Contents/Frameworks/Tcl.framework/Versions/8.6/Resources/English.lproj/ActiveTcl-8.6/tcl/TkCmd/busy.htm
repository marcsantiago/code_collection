<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Built-In Commands - busy manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TkCmd</a>
<small>&gt;</small> busy</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<dl>
<dd><a href="busy.htm#M2" name="L135">NAME</a> 

<dl>
<dd>busy - confine pointer and keyboard events to a window
sub-tree</dd>
</dl>
</dd>

<dd><a href="busy.htm#M3" name="L136">SYNOPSIS</a> 

<dl>
<dd><b>tk busy</b> <i>window</i> ?<i>options</i>?</dd>

<dd><b>tk busy hold</b> <i>window</i> ?<i>options</i>?</dd>

<dd><b>tk busy configure</b> <i>window</i> ?<i>option
value</i>?...</dd>

<dd><b>tk busy forget</b> <i>window</i> ?<i>window</i> ?...</dd>

<dd><b>tk busy current</b> ?<i>pattern</i>?</dd>

<dd><b>tk busy status</b> <i>window</i></dd>
</dl>
</dd>

<dd><a href="busy.htm#M4" name="L137">DESCRIPTION</a></dd>

<dd><a href="busy.htm#M5" name="L138">INTRODUCTION</a></dd>

<dd><a href="busy.htm#M6" name="L139">EXAMPLE</a></dd>

<dd><a href="busy.htm#M7" name="L140">OPERATIONS</a> 

<dl class="operations">
<dd><a href="busy.htm#M8" name="L141"><b>tk busy</b> <i>window</i>
?<i>option value</i>?...</a></dd>

<dd><a href="busy.htm#M9" name="L142"><b>tk busy hold</b>
<i>window</i> ?<i>option value</i>?...</a> 

<dl class="operations">
<dd><a href="busy.htm#M10" name="L143"><b>-cursor</b>
<i>cursorName</i></a></dd>
</dl>
</dd>

<dd><a href="busy.htm#M11" name="L144"><b>tk busy cget</b>
<i>window</i> <i>option</i></a></dd>

<dd><a href="busy.htm#M12" name="L145"><b>tk busy configure</b>
<i>window</i> ?<i>option value</i>?...</a></dd>

<dd><a href="busy.htm#M13" name="L146"><b>tk busy forget</b>
<i>window</i> ?<i>window</i>?...</a></dd>

<dd><a href="busy.htm#M14" name="L147"><b>tk busy current</b>
?<i>pattern</i>?</a></dd>

<dd><a href="busy.htm#M15" name="L148"><b>tk busy status</b>
<i>window</i></a></dd>
</dl>
</dd>

<dd><a href="busy.htm#M16" name="L149">EVENT HANDLING</a></dd>

<dd><a href="busy.htm#M17" name="L150">BINDINGS</a></dd>

<dd><a href="busy.htm#M18" name="L151">ENTER/LEAVE EVENTS</a></dd>

<dd><a href="busy.htm#M19" name="L152">KEYBOARD EVENTS</a></dd>

<dd><a href="busy.htm#M20" name="L153">PORTABILITY</a></dd>

<dd><a href="busy.htm#M21" name="L154">SEE ALSO</a></dd>

<dd><a href="busy.htm#M22" name="L155">KEYWORDS</a></dd>
</dl>

<h3><a name="M2">NAME</a></h3>

busy - confine pointer and keyboard events to a window sub-tree 

<h3><a name="M3">SYNOPSIS</a></h3>

<b><a href="../TkCmd/tk.htm">tk busy</a></b> <i>window</i>
?<i>options</i>?<br>
<b>tk busy hold</b> <i>window</i> ?<i>options</i>?<br>
<b>tk busy configure</b> <i>window</i> ?<i>option value</i>?...<br>
<b>tk busy forget</b> <i>window</i> ?<i>window</i> ?...<br>
<b>tk busy current</b> ?<i>pattern</i>?<br>
<b>tk busy status</b> <i>window</i><br>
<h3><a name="M4">DESCRIPTION</a></h3>

The <b><a href="../TkCmd/tk.htm">tk busy</a></b> command provides a
simple means to block keyboard, button, and pointer events from Tk
widgets, while overriding the widget's cursor with a configurable
busy cursor. 

<h3><a name="M5">INTRODUCTION</a></h3>

There are many times in applications where you want to temporarily
restrict what actions the user can take. For example, an
application could have a &ldquo;Run&rdquo; button that when pressed
causes some processing to occur. However, while the application is
busy processing, you probably don't want the user to be able to
click the &ldquo;Run&rdquo; button again. You may also want
restrict the user from other tasks such as clicking a
&ldquo;Print&rdquo; button. 

<p>The <b><a href="../TkCmd/tk.htm">tk busy</a></b> command lets
you make Tk widgets busy. This means that user interactions such as
button clicks, moving the mouse, typing at the keyboard, etc. are
ignored by the widget. You can set a special cursor (like a watch)
that overrides the widget's normal cursor, providing feedback that
the application (widget) is temporarily busy.</p>

<p>When a widget is made busy, the widget and all of its
descendants will ignore events. It's easy to make an entire panel
of widgets busy. You can simply make the toplevel widget (such as
&ldquo;.&rdquo;) busy. This is easier and far much more efficient
than recursively traversing the widget hierarchy, disabling each
widget and re-configuring its cursor.</p>

<p>Often, the <b><a href="../TkCmd/tk.htm">tk busy</a></b> command
can be used instead of Tk's <b><a href=
"../TkCmd/grab.htm">grab</a></b> command. Unlike <b><a href=
"../TkCmd/grab.htm">grab</a></b> which restricts all user
interactions to one widget, with the <b><a href=
"../TkCmd/tk.htm">tk busy</a></b> command you can have more than
one widget active (for example, a &ldquo;Cancel&rdquo; dialog and a
&ldquo;Help&rdquo; button).</p>

<h4><a name="M6">EXAMPLE</a></h4>

You can make several widgets busy by simply making its ancestor
widget busy using the <b>hold</b> operation. 

<pre>
frame .top
button .top.button; canvas .top.canvas
pack .top.button .top.canvas
pack .top
# . . .
<b><a href="../TkCmd/tk.htm">tk busy</a></b> hold .top
update
</pre>

<p>All the widgets within <b>.top</b> (including <b>.top</b>) are
now busy. Using <b><a href="../TclCmd/update.htm">update</a></b>
insures that <b><a href="../TkCmd/tk.htm">tk busy</a></b> command
will take effect before any other user events can occur.</p>

<p>When the application is no longer busy processing, you can allow
user interactions again and free any resources it allocated by the
<b>forget</b> operation.</p>

<pre>
<b><a href="../TkCmd/tk.htm">tk busy</a></b> forget .top
</pre>

<p>The busy window has a configurable cursor. You can change the
busy cursor using the <b>configure</b> operation.</p>

<pre>
<b><a href=
"../TkCmd/tk.htm">tk busy</a></b> configure .top -cursor "watch"
</pre>

<p>Destroying the widget will also clean up any resources allocated
by the <b>tk busy</b> command.</p>

<h3><a name="M7">OPERATIONS</a></h3>

The following operations are available for the <b><a href=
"../TkCmd/tk.htm">tk busy</a></b> command: 

<dl class="operations">
<dt><a name="M8"><b>tk busy</b> <i>window</i> ?<i>option
value</i>?...</a></dt>

<dd>Shortcut for <b>tk busy hold</b> command.</dd>

<dt><a name="M9"><b>tk busy hold</b> <i>window</i> ?<i>option
value</i>?...</a></dt>

<dd>Makes the specified <i>window</i> (and its descendants in the
Tk window hierarchy) appear busy. <i>Window</i> must be a valid
path name of a Tk widget. A transparent window is put in front of
the specified window. This transparent window is mapped the next
time idle tasks are processed, and the specified window and its
descendants will be blocked from user interactions. Normally <b><a
href="../TclCmd/update.htm">update</a></b> should be called
immediately afterward to insure that the hold operation is in
effect before the application starts its processing. The following
configuration options are valid: 

<dl class="operations">
<dt><a name="M10"><b>-cursor</b> <i>cursorName</i></a></dt>

<dd>Specifies the cursor to be displayed when the widget is made
busy. <i>CursorName</i> can be in any form accepted by <b><a href=
"../TkLib/GetCursor.htm">Tk_GetCursor</a></b>. The default cursor
is <b>wait</b> on Windows and <b>watch</b> on other platforms.</dd>
</dl>
</dd>

<dt><a name="M11"><b>tk busy cget</b> <i>window</i>
<i>option</i></a></dt>

<dd>Queries the <b><a href="../TkCmd/tk.htm">tk busy</a></b>
command configuration options for <i>window</i>. <i>Window</i> must
be the path name of a widget previously made busy by the
<b>hold</b> operation. The command returns the present value of the
specified <i>option</i>. <i>Option</i> may have any of the values
accepted by the <b>hold</b> operation.</dd>

<dt><a name="M12"><b>tk busy configure</b> <i>window</i> ?<i>option
value</i>?...</a></dt>

<dd>Queries or modifies the <b><a href="../TkCmd/tk.htm">tk
busy</a></b> command configuration options for <i>window</i>.
<i>Window</i> must be the path name of a widget previously made
busy by the <b>hold</b> operation. If no options are specified, a
list describing all of the available options for <i>window</i> (see
<b><a href="../TkLib/ConfigWidg.htm">Tk_ConfigureInfo</a></b> for
information on the format of this list) is returned. If
<i>option</i> is specified with no <i>value</i>, then the command
returns a list describing the one named option (this list will be
identical to the corresponding sublist of the value returned if no
<i>option</i> is specified). If one or more <i>option-value</i>
pairs are specified, then the command modifies the given widget
option(s) to have the given value(s); in this case the command
returns the empty string. <i>Option</i> may have any of the values
accepted by the <b>hold</b> operation. 

<p>Please note that the option database is referenced through
<i>window</i>. For example, if the widget <b>.frame</b> is to be
made busy, the busy cursor can be specified for it by either <b><a
href="../TkCmd/option.htm">option</a></b> command:</p>

<pre>
option add *frame.busyCursor gumby
option add *Frame.BusyCursor gumby
</pre>
</dd>

<dt><a name="M13"><b>tk busy forget</b> <i>window</i>
?<i>window</i>?...</a></dt>

<dd>Releases resources allocated by the <b><a href=
"../TkCmd/tk.htm">tk busy</a></b> command for <i>window</i>,
including the transparent window. User events will again be
received by <i>window</i>. Resources are also released when
<i>window</i> is destroyed. <i>Window</i> must be the name of a
widget specified in the <b>hold</b> operation, otherwise an error
is reported.</dd>

<dt><a name="M14"><b>tk busy current</b> ?<i>pattern</i>?</a></dt>

<dd>Returns the pathnames of all widgets that are currently busy.
If a <i>pattern</i> is given, only the path names of busy widgets
matching <i>pattern</i> are returned.</dd>

<dt><a name="M15"><b>tk busy status</b> <i>window</i></a></dt>

<dd>Returns the status of a widget <i>window</i>. If <i>window</i>
presently can not receive user interactions, <b>1</b> is returned,
otherwise <b>0</b>.</dd>
</dl>

<h3><a name="M16">EVENT HANDLING</a></h3>

<h4><a name="M17">BINDINGS</a></h4>

The event blocking feature is implemented by creating and mapping a
transparent window that completely covers the widget. When the busy
window is mapped, it invisibly shields the widget and its hierarchy
from all events that may be sent. Like Tk widgets, busy windows
have widget names in the Tk window hierarchy. This means that you
can use the <b><a href="../TkCmd/bind.htm">bind</a></b> command, to
handle events in the busy window. 

<pre>
<b><a href="../TkCmd/tk.htm">tk busy</a></b> hold .frame.canvas
bind .frame.canvas_Busy &lt;Enter&gt; { ... }
</pre>

<p>Normally the busy window is a sibling of the widget. The name of
the busy window is &ldquo;<i>widget</i><b>_Busy</b>&rdquo; where
<i>widget</i> is the name of the widget to be made busy. In the
previous example, the pathname of the busy window is
&ldquo;<b>.frame.canvas_Busy</b>&rdquo;. The exception is when the
widget is a toplevel widget (such as &ldquo;.&rdquo;) where the
busy window can't be made a sibling. The busy window is then a
child of the widget named &ldquo;<i>widget</i><b>._Busy</b>&rdquo;
where <i>widget</i> is the name of the toplevel widget. In the
following example, the pathname of the busy window is
&ldquo;<b>._Busy</b>&rdquo;.</p>

<pre>
<b><a href="../TkCmd/tk.htm">tk busy</a></b> hold .
bind ._Busy &lt;Enter&gt; { ... }
</pre>

<h4><a name="M18">ENTER/LEAVE EVENTS</a></h4>

Mapping and unmapping busy windows generates Enter/Leave events for
all widgets they cover. Please note this if you are tracking
Enter/Leave events in widgets. 

<h4><a name="M19">KEYBOARD EVENTS</a></h4>

When a widget is made busy, the widget is prevented from gaining
the keyboard focus by the busy window. But if the widget already
had focus, it still may received keyboard events. To prevent this,
you must move focus to another window. 

<pre>
<b><a href="../TkCmd/tk.htm">tk busy</a></b> hold .frame
label .dummy
focus .dummy
update
</pre>

<p>The above example moves the focus from .frame immediately after
invoking the <b>hold</b> so that no keyboard events will be sent to
<b>.frame</b> or any of its descendants.</p>

<h3><a name="M20">PORTABILITY</a></h3>

Note that the <b><a href="../TkCmd/tk.htm">tk busy</a></b> command
does not currently have any effect on OSX when Tk is built using
Aqua support. 

<h3><a name="M21">SEE ALSO</a></h3>

<b><a href="../TkCmd/grab.htm">grab</a></b> 

<h3><a name="M22">KEYWORDS</a></h3>

<a href="../Keywords/B.htm#busy">busy</a>, <a href=
"../Keywords/K.htm#keyboard events">keyboard events</a>, <a href=
"../Keywords/P.htm#pointer events">pointer events</a>, <a href=
"../Keywords/W.htm#window">window</a> 

<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1993-1998 Lucent Technologies, Inc. Copyright
&copy; 2008 Jos Decoster</div>
</body>
</html>

