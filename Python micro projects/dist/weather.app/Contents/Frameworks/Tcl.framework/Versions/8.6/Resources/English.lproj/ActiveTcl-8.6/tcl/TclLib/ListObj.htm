<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta name='Author' content='ActiveState'>
<link rel='stylesheet' type='text/css' href='../../aspn.css'>
<title>Tcl Library Procedures - Tcl_ListObj manual page</title>
<link rel="stylesheet" href="../docs.css" type="text/css" media=
"all">
</head>
<body>
<div class="banner">
<table width="100%" border="0" cellspacing="0" cellpadding="3">
<tr>
<td align="left"><a target="_blank" href=
"http://www.activestate.com/activetcl"><img src=
"../../images/ActiveTcl.gif" border="0" align="left" alt=
"ActiveTcl"></a> </td>
<td align="center" class="heading">ActiveTcl User Guide</td>
<td align="right"><a target="_blank" href=
"http://www.activestate.com"><img src="../../images/AS_logo.gif"
border="0" align="right" alt="ActiveState Software Inc."></a> </td>
</tr>
</table>
</div>

<br>
<h2><a href="../contents.htm">Tcl/Tk Documentation</a>
<small>&gt;</small> <a href="contents.htm">TclLib</a>
<small>&gt;</small> ListObj</h2>

<h3><a href="../UserCmd/contents.htm">Tcl/Tk Applications</a> | <a
href="../TclCmd/contents.htm">Tcl Commands</a> | <a href=
"../TkCmd/contents.htm">Tk Commands</a> | <a href=
"../TclLib/contents.htm">Tcl Library</a> | <a href=
"../TkLib/contents.htm">Tk Library</a></h3>

<h3><a name="M2">NAME</a></h3>

Tcl_ListObjAppendList, Tcl_ListObjAppendElement, Tcl_NewListObj,
Tcl_SetListObj, Tcl_ListObjGetElements, Tcl_ListObjLength,
Tcl_ListObjIndex, Tcl_ListObjReplace - manipulate Tcl values as
lists 

<h3><a name="M3">SYNOPSIS</a></h3>

<b>#include &lt;tcl.h&gt;</b><br>
int<br>
<b>Tcl_ListObjAppendList</b>(<i>interp, listPtr,
elemListPtr</i>)<br>
int<br>
<b>Tcl_ListObjAppendElement</b>(<i>interp, listPtr, objPtr</i>)<br>
Tcl_Obj *<br>
<b>Tcl_NewListObj</b>(<i>objc, objv</i>)<br>
<b>Tcl_SetListObj</b>(<i>objPtr, objc, objv</i>)<br>
int<br>
<b>Tcl_ListObjGetElements</b>(<i>interp, listPtr, objcPtr,
objvPtr</i>)<br>
int<br>
<b>Tcl_ListObjLength</b>(<i>interp, listPtr, intPtr</i>)<br>
int<br>
<b>Tcl_ListObjIndex</b>(<i>interp, listPtr, index,
objPtrPtr</i>)<br>
int<br>
<b>Tcl_ListObjReplace</b>(<i>interp, listPtr, first, count, objc,
objv</i>)<br>
<h3><a name="M4">ARGUMENTS</a></h3>

<dl class="arguments">
<dt><a href="../TclLib/Interp.htm">Tcl_Interp</a> <b>*interp</b>
(in)</dt>

<dd>If an error occurs while converting a value to be a list value,
an error message is left in the interpreter's result value unless
<i>interp</i> is NULL.</dd>

<dt>Tcl_Obj <b>*listPtr</b> (in/out)</dt>

<dd>Points to the list value to be manipulated. If <i>listPtr</i>
does not already point to a list value, an attempt will be made to
convert it to one.</dd>

<dt>Tcl_Obj <b>*elemListPtr</b> (in/out)</dt>

<dd>For <b>Tcl_ListObjAppendList</b>, this points to a list value
containing elements to be appended onto <i>listPtr</i>. Each
element of *<i>elemListPtr</i> will become a new element of
<i>listPtr</i>. If *<i>elemListPtr</i> is not NULL and does not
already point to a list value, an attempt will be made to convert
it to one.</dd>

<dt>Tcl_Obj <b>*objPtr</b> (in)</dt>

<dd>For <b>Tcl_ListObjAppendElement</b>, points to the Tcl value
that will be appended to <i>listPtr</i>. For <b>Tcl_SetListObj</b>,
this points to the Tcl value that will be converted to a list value
containing the <i>objc</i> elements of the array referenced by
<i>objv</i>.</dd>

<dt>int <b>*objcPtr</b> (in)</dt>

<dd>Points to location where <b>Tcl_ListObjGetElements</b> stores
the number of element values in <i>listPtr</i>.</dd>

<dt>Tcl_Obj <b>***objvPtr</b> (out)</dt>

<dd>A location where <b>Tcl_ListObjGetElements</b> stores a pointer
to an array of pointers to the element values of
<i>listPtr</i>.</dd>

<dt>int <b>objc</b> (in)</dt>

<dd>The number of Tcl values that <b>Tcl_NewListObj</b> will insert
into a new list value, and <b>Tcl_ListObjReplace</b> will insert
into <i>listPtr</i>. For <b>Tcl_SetListObj</b>, the number of Tcl
values to insert into <i>objPtr</i>.</dd>

<dt>Tcl_Obj *const <b>objv[]</b> (in)</dt>

<dd>An array of pointers to values. <b>Tcl_NewListObj</b> will
insert these values into a new list value and
<b>Tcl_ListObjReplace</b> will insert them into an existing
<i>listPtr</i>. Each value will become a separate list
element.</dd>

<dt>int <b>*intPtr</b> (out)</dt>

<dd>Points to location where <b>Tcl_ListObjLength</b> stores the
length of the list.</dd>

<dt>int <b>index</b> (in)</dt>

<dd>Index of the list element that <b>Tcl_ListObjIndex</b> is to
return. The first element has index 0.</dd>

<dt>Tcl_Obj <b>**objPtrPtr</b> (out)</dt>

<dd>Points to place where <b>Tcl_ListObjIndex</b> is to store a
pointer to the resulting list element value.</dd>

<dt>int <b>first</b> (in)</dt>

<dd>Index of the starting list element that
<b>Tcl_ListObjReplace</b> is to replace. The list's first element
has index 0.</dd>

<dt>int <b>count</b> (in)</dt>

<dd>The number of elements that <b>Tcl_ListObjReplace</b> is to
replace.</dd>
</dl>

<h3><a name="M5">DESCRIPTION</a></h3>

Tcl list values have an internal representation that supports the
efficient indexing and appending. The procedures described in this
man page are used to create, modify, index, and append to Tcl list
values from C code. 

<p><b>Tcl_ListObjAppendList</b> and <b>Tcl_ListObjAppendElement</b>
both add one or more values to the end of the list value referenced
by <i>listPtr</i>. <b>Tcl_ListObjAppendList</b> appends each
element of the list value referenced by <i>elemListPtr</i> while
<b>Tcl_ListObjAppendElement</b> appends the single value referenced
by <i>objPtr</i>. Both procedures will convert the value referenced
by <i>listPtr</i> to a list value if necessary. If an error occurs
during conversion, both procedures return <b>TCL_ERROR</b> and
leave an error message in the interpreter's result value if
<i>interp</i> is not NULL. Similarly, if <i>elemListPtr</i> does
not already refer to a list value, <b>Tcl_ListObjAppendList</b>
will attempt to convert it to one and if an error occurs during
conversion, will return <b>TCL_ERROR</b> and leave an error message
in the interpreter's result value if interp is not NULL. Both
procedures invalidate any old string representation of
<i>listPtr</i> and, if it was converted to a list value, free any
old internal representation. Similarly,
<b>Tcl_ListObjAppendList</b> frees any old internal representation
of <i>elemListPtr</i> if it converts it to a list value. After
appending each element in <i>elemListPtr</i>,
<b>Tcl_ListObjAppendList</b> increments the element's reference
count since <i>listPtr</i> now also refers to it. For the same
reason, <b>Tcl_ListObjAppendElement</b> increments <i>objPtr</i>'s
reference count. If no error occurs, the two procedures return
<b>TCL_OK</b> after appending the values.</p>

<p><b>Tcl_NewListObj</b> and <b>Tcl_SetListObj</b> create a new
value or modify an existing value to hold the <i>objc</i> elements
of the array referenced by <i>objv</i> where each element is a
pointer to a Tcl value. If <i>objc</i> is less than or equal to
zero, they return an empty value. The new value's string
representation is left invalid. The two procedures increment the
reference counts of the elements in <i>objc</i> since the list
value now refers to them. The new list value returned by
<b>Tcl_NewListObj</b> has reference count zero.</p>

<p><b>Tcl_ListObjGetElements</b> returns a count and a pointer to
an array of the elements in a list value. It returns the count by
storing it in the address <i>objcPtr</i>. Similarly, it returns the
array pointer by storing it in the address <i>objvPtr</i>. The
memory pointed to is managed by Tcl and should not be freed or
written to by the caller. If the list is empty, 0 is stored at
<i>objcPtr</i> and NULL at <i>objvPtr</i>. If <i>listPtr</i> is not
already a list value, <b>Tcl_ListObjGetElements</b> will attempt to
convert it to one; if the conversion fails, it returns
<b>TCL_ERROR</b> and leaves an error message in the interpreter's
result value if <i>interp</i> is not NULL. Otherwise it returns
<b>TCL_OK</b> after storing the count and array pointer.</p>

<p><b>Tcl_ListObjLength</b> returns the number of elements in the
list value referenced by <i>listPtr</i>. It returns this count by
storing an integer in the address <i>intPtr</i>. If the value is
not already a list value, <b>Tcl_ListObjLength</b> will attempt to
convert it to one; if the conversion fails, it returns
<b>TCL_ERROR</b> and leaves an error message in the interpreter's
result value if <i>interp</i> is not NULL. Otherwise it returns
<b>TCL_OK</b> after storing the list's length.</p>

<p>The procedure <b>Tcl_ListObjIndex</b> returns a pointer to the
value at element <i>index</i> in the list referenced by
<i>listPtr</i>. It returns this value by storing a pointer to it in
the address <i>objPtrPtr</i>. If <i>listPtr</i> does not already
refer to a list value, <b>Tcl_ListObjIndex</b> will attempt to
convert it to one; if the conversion fails, it returns
<b>TCL_ERROR</b> and leaves an error message in the interpreter's
result value if <i>interp</i> is not NULL. If the index is out of
range, that is, <i>index</i> is negative or greater than or equal
to the number of elements in the list, <b>Tcl_ListObjIndex</b>
stores a NULL in <i>objPtrPtr</i> and returns <b>TCL_OK</b>.
Otherwise it returns <b>TCL_OK</b> after storing the element's
value pointer. The reference count for the list element is not
incremented; the caller must do that if it needs to retain a
pointer to the element.</p>

<p><b>Tcl_ListObjReplace</b> replaces zero or more elements of the
list referenced by <i>listPtr</i> with the <i>objc</i> values in
the array referenced by <i>objv</i>. If <i>listPtr</i> does not
point to a list value, <b>Tcl_ListObjReplace</b> will attempt to
convert it to one; if the conversion fails, it returns
<b>TCL_ERROR</b> and leaves an error message in the interpreter's
result value if <i>interp</i> is not NULL. Otherwise, it returns
<b>TCL_OK</b> after replacing the values. If <i>objv</i> is NULL,
no new elements are added. If the argument <i>first</i> is zero or
negative, it refers to the first element. If <i>first</i> is
greater than or equal to the number of elements in the list, then
no elements are deleted; the new elements are appended to the list.
<i>count</i> gives the number of elements to replace. If
<i>count</i> is zero or negative then no elements are deleted; the
new elements are simply inserted before the one designated by
<i>first</i>. <b>Tcl_ListObjReplace</b> invalidates
<i>listPtr</i>'s old string representation. The reference counts of
any elements inserted from <i>objv</i> are incremented since the
resulting list now refers to them. Similarly, the reference counts
for any replaced values are decremented.</p>

<p>Because <b>Tcl_ListObjReplace</b> combines both element
insertion and deletion, it can be used to implement a number of
list operations. For example, the following code inserts the
<i>objc</i> values referenced by the array of value pointers
<i>objv</i> just before the element <i>index</i> of the list
referenced by <i>listPtr</i>:</p>

<pre>
result = <b>Tcl_ListObjReplace</b>(interp, listPtr, index, 0,
        objc, objv);
</pre>

<p>Similarly, the following code appends the <i>objc</i> values
referenced by the array <i>objv</i> to the end of the list
<i>listPtr</i>:</p>

<pre>
result = <b>Tcl_ListObjLength</b>(interp, listPtr, &amp;length);
if (result == TCL_OK) {
    result = <b>Tcl_ListObjReplace</b>(interp, listPtr, length, 0,
            objc, objv);
}
</pre>

<p>The <i>count</i> list elements starting at <i>first</i> can be
deleted by simply calling <b>Tcl_ListObjReplace</b> with a NULL
<i>objvPtr</i>:</p>

<pre>
result = <b>Tcl_ListObjReplace</b>(interp, listPtr, first, count,
        0, NULL);
</pre>

<h3><a name="M6">SEE ALSO</a></h3>

<b><a href="../TclLib/Object.htm">Tcl_NewObj</a></b>, <b><a href=
"../TclLib/Object.htm">Tcl_DecrRefCount</a></b>, <b><a href=
"../TclLib/Object.htm">Tcl_IncrRefCount</a></b>, <b><a href=
"../TclLib/SetResult.htm">Tcl_GetObjResult</a></b> 

<h3><a name="M7">KEYWORDS</a></h3>

<a href="../Keywords/A.htm#append">append</a>, <a href=
"../Keywords/I.htm#index">index</a>, <a href=
"../Keywords/I.htm#insert">insert</a>, <a href=
"../Keywords/I.htm#internal representation">internal
representation</a>, <a href="../Keywords/L.htm#length">length</a>,
<a href="../Keywords/L.htm#list">list</a>, <a href=
"../Keywords/L.htm#list value">list value</a>, <a href=
"../Keywords/L.htm#list type">list type</a>, <a href=
"../Keywords/V.htm#value">value</a>, <a href=
"../Keywords/V.htm#value type">value type</a>, <a href=
"../Keywords/R.htm#replace">replace</a>, <a href=
"../Keywords/S.htm#string representation">string representation</a>


<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1996-1997 Sun Microsystems, Inc.</div>
</body>
</html>

